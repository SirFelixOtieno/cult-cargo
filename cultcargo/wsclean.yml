_include:
  - genesis/cult-cargo-base.yml
  - genesis/wsclean.yml

cabs:
  wsclean:
    name: wsclean
    image: ${vars.cult-cargo.registry}/wsclean:cc${vars.cult-cargo.version}
    command: wsclean
    info: WSClean imager

    defaults:
      column: DATA

    policies:
      positional: false
      prefix: "-"
      replace: { '_': '-' }

    inputs:
      _use: lib.params.wsclean.base-inputs

    outputs:
      _use: lib.params.wsclean.base-outputs

      dirty:
        info: Dirty images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-dirty.fits)"
        must_exist: false
      restored: 
        info: Restored images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-image.fits)"
        must_exist: false
      restored-timeint: 
        info: Restored images per time interval
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-image.fits)"
        must_exist: false
      residual:
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-residual.fits)"
        must_exist: false
      model:
        info: Model images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-model.fits)"
        must_exist: false
      restored-mfs:
        info: Restored MFS image
        dtype: File
        implicit: "{current.prefix}-MFS-image.fits"
        must_exist: false
      residual-mfs:
        info: Residual MFS image
        dtype: File
        implicit: "{current.prefix}-MFS-residual.fits"
        must_exist: false
      model-mfs:
        info: Model MFS image
        dtype: File
        implicit: "{current.prefix}-MFS-model.fits"
        must_exist: false
      dirty-mfs:
        info: Dirty MFS image
        dtype: File
        implicit: "{current.prefix}-MFS-dirty.fits"
        must_exist: false

  wsclean-pol:
    name: wsclean-pol
    image: wsclean:cc${vars.cult-cargo.version}
    command: wsclean
    info: WSClean imager, polarized mode

    defaults:
      column: DATA
      pol: IQUV

    policies:
      positional: false
      prefix: "-"
      replace: { '_': '-' }

    inputs:
      _use: lib.params.wsclean.base-inputs

      pol: 
        choices: [IQ, IV, IQUV]
      join-polarizations:
        dtype: bool

    outputs:
      _use: lib.params.wsclean.base-outputs

      restored: 
        info: Restored images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-image.fits)"
        must_exist: false
      residual:
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-residual.fits)"
        must_exist: false
      model:
        info: Model images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-model.fits)"
        must_exist: false
      restored-mfs-i:
        info: Restored MFS images
        dtype: File
        implicit: "=GLOB({current.prefix}-MFS-I-image.fits)"
        must_exist: false
      restored-mfs:
        info: Restored MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-image.fits)"
        must_exist: false
      residual-mfs:
        info: Residual MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-residual.fits)"
        must_exist: false
      residual-mfs-stokes:
        v:
          info: Residual MFS images
          dtype: File
          implicit: "=GLOB({current.prefix}-MFS-V-residual.fits)"
          must_exist: false
      model-mfs:
        info: Model MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-model.fits)"
        must_exist: false
      dirty-mfs:
        info: Dirty MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-dirty.fits)"
        must_exist: false
      dirty:
        stokes:
          info: Dirty images
          dtype: List[File]
          implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-dirty.fits)"
          must_exist: false
        i:
          info: Dirty I image
          dtype: File
          implicit: "{current.prefix}-I-dirty.fits"
          must_exist: false
        v:
          info: Dirty V image
          dtype: File
          implicit: "{current.prefix}-V-dirty.fits"
          must_exist: false
