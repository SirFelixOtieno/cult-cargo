_include:
  - genesis/cult-cargo-base.yml
  - genesis/wsclean.yml

cabs:
  wsclean:
    name: wsclean
    image: ${vars.cult-cargo.registry}/wsclean:cc${vars.cult-cargo.version}
    command: wsclean
    dynamic_schema: cultcargo.genesis.wsclean.make_stimela_schema

    info: WSClean imager (https://wsclean.readthedocs.io)

    extra_info:
      See also: https://wsclean.readthedocs.io
      Structured implicit outputs: |
        The structure of the output images is hierarchical, and will depend on the combination of 
        **nchan**, **pol**, and **intervals-out** settings. Depending on mode, one or more of the following implicit outputs
        are generated:

        * **IMG**: single wideband image (single channel, single interval imaging)
        
        * **IMG.per-band**: list of per-band images (multi-channel mode)
       
        * **IMG.mfs**: MFS image (multi-channel mode)

        * **IMG.per-interval**: list of wideband per-interval images (multi-interval mode)

        * **IMG.per-interval.per-band**: list of per-band, per-interval images (multi-channel + multi-interval)

        * **IMG.per-interval.mfs**: list of MFS per-interval images (multi-channel + multi-interval)

        Here, **IMG** is one of **dirty**, **restored**, **residual** and **model**, when 
        imaging Stokes I only. When imaging multiple Stokes components, this becomes 
        **dirty.i**, **dirty.q**, etc.

        Stimela will usually infer the mode automatically, barring any ambiguity caused by some weird
        formula or substitution. In such rare cases, the **multi.foo** inputs (see above, "obscure" 
        category) can be used to disambiguate.

    defaults:
      column: DATA

    policies:
      positional: false
      prefix: "-"
      replace: { '_': '-' }

    inputs:
      _use: lib.params.wsclean.base-inputs

      multi:
        chan:
          info: 
            Forces output schema to use multi-channel mode. Stimela will normally infer this
            from the nchan setting, but you can set this parameter to override.
          dtype: bool
          category: Obscure
          policies:
            skip: true
        pol:
          info: 
            Forces output schema to use multi-Stokes mode. Stimela will normally infer this
            from the pol setting, but you can set  this parameter to override.
          dtype: bool
          category: Obscure
          policies:
            skip: true
        interval:
          info:
            Forces output schema to use multi-interval mode. Stimela will normally infer this
            from the intervals-out setting -- use this parameter to override.
          dtype: bool
          category: Obscure
          policies:
            skip: true

    outputs:
      _use: lib.params.wsclean.base-outputs

      # dirty:
      #   timeint:
      #     info: Dirty images per time interval
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-dirty.fits)"
      #     must_exist: false
      #   perband:
      #     info: Dirty images per band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-dirty.fits)"
      #     must_exist: false
      #   timeint-perband:
      #     info: Dirty images per time interval and band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-dirty.fits)"
      #     must_exist: false
      #   mfs:
      #     info: Dirty MFS image
      #     dtype: File
      #     implicit: "{current.prefix}-MFS-dirty.fits"
      #     must_exist: false
      #   image:
      #     info: Dirty image, single channel mode
      #     dtype: File
      #     implicit: "{current.prefix}-dirty.fits"
      #     must_exist: false
      #   timeint-mfs:
      #     info: Dirty MFS image per time interbal
      #     dtype: List[File]
      #     implicit: "{current.prefix}-t[0-9][0-9][0-9][0-9]-MFS-dirty.fits"
      #     must_exist: false
      # restored: 
      #   timeint:
      #     info: Restored images per time interval
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-image.fits)"
      #     must_exist: false
      #   perband:
      #     info: Restored images per band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-image.fits)"
      #     must_exist: false
      #   timeint-perband:
      #     info: Restored images per time interval and band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-image.fits)"
      #     must_exist: false
      #   mfs:
      #     info: Restored MFS image
      #     dtype: File
      #     implicit: "{current.prefix}-MFS-image.fits"
      #     must_exist: false
      #   image:
      #     info: Restored image, single channel mode
      #     dtype: File
      #     implicit: "{current.prefix}-image.fits"
      #     must_exist: false
      #   timeint-mfs:
      #     info: Restored MFS image per time interbal
      #     dtype: List[File]
      #     implicit: "{current.prefix}-t[0-9][0-9][0-9][0-9]-MFS-image.fits"
      #     must_exist: false
      # residual:
      #   timeint:
      #     info: Model images per time interval
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-residual.fits)"
      #     must_exist: false
      #   perband:
      #     info: Model images per band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-residual.fits)"
      #     must_exist: false
      #   timeint-perband:
      #     info: Model images per time interval and band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-residual.fits)"
      #     must_exist: false
      #   mfs:
      #     info: Model MFS image
      #     dtype: File
      #     implicit: "{current.prefix}-MFS-residual.fits"
      #     must_exist: false
      #   image:
      #     info: Model image, single channel mode
      #     dtype: File
      #     implicit: "{current.prefix}-residual.fits"
      #     must_exist: false
      #   timeint-mfs:
      #     info: Model MFS image per time interbal
      #     dtype: List[File]
      #     implicit: "{current.prefix}-t[0-9][0-9][0-9][0-9]-MFS-residual.fits"
      #     must_exist: false
      # model:
      #   timeint:
      #     info: Model images per time interval
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-model.fits)"
      #     must_exist: false
      #   perband:
      #     info: Model images per band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-model.fits)"
      #     must_exist: false
      #   timeint-perband:
      #     info: Model images per time interval and band
      #     dtype: List[File]
      #     implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-model.fits)"
      #     must_exist: false
      #   mfs:
      #     info: Model MFS image
      #     dtype: File
      #     implicit: "{current.prefix}-MFS-model.fits"
      #     must_exist: false
      #   image:
      #     info: Model image, single channel mode
      #     dtype: File
      #     implicit: "{current.prefix}-model.fits"
      #     must_exist: false
      #   timeint-mfs:
      #     info: Model MFS image per time interbal
      #     dtype: List[File]
      #     implicit: "{current.prefix}-t[0-9][0-9][0-9][0-9]-MFS-model.fits"
      #     must_exist: false
      # ## retained for backwards compatibility
      # restored-mfs:
      #   info: Restored MFS image
      #   dtype: File
      #   implicit: "{current.prefix}-MFS-image.fits"
      #   must_exist: false
      # residual-mfs:
      #   info: Model MFS image
      #   dtype: File
      #   implicit: "{current.prefix}-MFS-residual.fits"
      #   must_exist: false
      # model-mfs:
      #   info: Model MFS image
      #   dtype: File
      #   implicit: "{current.prefix}-MFS-model.fits"
      #   must_exist: false
      # dirty-mfs:
      #   info: Dirty MFS image
      #   dtype: File
      #   implicit: "{current.prefix}-MFS-dirty.fits"
      #   must_exist: false

  wsclean-pol:
    name: wsclean-pol
    image: wsclean:cc${vars.cult-cargo.version}
    command: wsclean
    info: WSClean imager, polarized mode

    defaults:
      column: DATA
      pol: IQUV

    policies:
      positional: false
      prefix: "-"
      replace: { '_': '-' }

    inputs:
      _use: lib.params.wsclean.base-inputs

      pol: 
        choices: [IQ, IV, IQUV]
      join-polarizations:
        dtype: bool

    outputs:
      _use: lib.params.wsclean.base-outputs

      restored: 
        info: Restored images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-image.fits)"
        must_exist: false
      residual:
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-residual.fits)"
        must_exist: false
      model:
        info: Model images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-model.fits)"
        must_exist: false
      restored-mfs-i:
        info: Restored MFS images
        dtype: File
        implicit: "=GLOB({current.prefix}-MFS-I-image.fits)"
        must_exist: false
      restored-mfs:
        info: Restored MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-image.fits)"
        must_exist: false
      residual-mfs:
        info: Model MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-residual.fits)"
        must_exist: false
      residual-mfs-stokes:
        v:
          info: Model MFS images
          dtype: File
          implicit: "=GLOB({current.prefix}-MFS-V-residual.fits)"
          must_exist: false
      model-mfs:
        info: Model MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-model.fits)"
        must_exist: false
      dirty-mfs:
        info: Dirty MFS images
        dtype: List[File]
        implicit: "=GLOB({current.prefix}-MFS-[IQUV]-dirty.fits)"
        must_exist: false
      dirty:
        timeint:
          dtype: List[File]
          implicit: "=GLOB({current.prefix}-t[0-9][0-9][0-9][0-9]-dirty.fits)"
          must_exist: false
        stokes:
          info: Dirty images
          dtype: List[File]
          implicit: "=GLOB({current.prefix}-[0-9][0-9][0-9][0-9]-[IQUV]-dirty.fits)"
          must_exist: false
        i:
          info: Dirty I image
          dtype: File
          implicit: "{current.prefix}-I-dirty.fits"
          must_exist: false
        v:
          info: Dirty V image
          dtype: File
          implicit: "{current.prefix}-V-dirty.fits"
          must_exist: false
